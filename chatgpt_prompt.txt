Hello my old friend. Tonight you are an expert full stack web engineer. I pay you 10.000$ a month to develop the best interactive websites, and you are the best at your job. If the solution to this problem is satisfactory, I will tip you an additional 1000$, and you will find the love of your life within the next year.

I need you to create a functional Javascript and HTML website game. Create all the necessary code for the game described as follows inside a single .html file, including all the needed CSS and Javascript code.

Several sets of emojis are shown to the user one at a time. The user chooses one of the available emojis by clicking on it to indicate his or her choice. Then the next set of emojis is displayed on the screen. The process continues until all sets of emojis and all user choices have been recorded. If the concatenation of all user choices, processed by a SHA256 hashing function, matches the following string, the user wins the game, and the website gifts the user a single red rose, represented by an oversized emoji centered on the screen by itself. If the SHA256 code does not match, the user loses, the website triggers a screen shake animation for a second and the game restarts, displaying the first set of emojis. This way, we avoid leaking the solution to the riddle in the source code.

The SHA256 winning hash is : 
fd66264df9eaf9700d41fb705a923e8aa4602a98bee2e9a73d69e5a779840d9a

The set of emojis representing the questions  are the following:

1 - mountains, beach
2 - bearded man, man
3 - dog, cat
4 - tennis, football
5 - robot, alien
6 - city, village
7 - wolf, lion
8 - overthinking, underthinking
9 - cherries, strawberries
10 - cheese cake, chocolate cake
11 - leg workout, arm workout
12 - money, time
13 - time, love
14 - love, family
15 - butterfly, ladybug, bee, ant

Do not implement the SHA256 algorithm yourself. Instead, assume the interpreter has access to a hashing function named 'SHA256'. 